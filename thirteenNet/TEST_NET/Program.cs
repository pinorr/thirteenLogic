
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace TEST_NET
{
    class Program
    {
        private static int Compare(stAnswer temp1, stAnswer temp2)
        {
            double[,] fVal = new double[3, 16 * 14]{
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.02, 0.05, 0.09, 0.17, 0.26, 0.37, 0.49, 0.60, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.78, 0.82, 0.88, 0.93, 0.98, 1.03, 1.10, 1.16, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.26, 1.33, 1.50, 1.82, 2.24, 2.78, 3.39, 4.05, 4.76, 4.76, 4.76, 4.76, 11.42, 17.58, 23.23, 28.25, 32.63, 36.36, 39.60, 42.41, 44.81, 46.84, 48.70, 50.24, 51.57, 51.57, 51.57, 51.57, 55.02, 58.68, 62.40, 66.10, 69.66, 73.21, 76.75, 80.10, 83.33, 86.66, 90.06, 93.41, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.79, 97.09, 97.46, 97.90, 98.35, 98.79, 99.21, 99.65, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,},
		        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.08, 0.34, 1.19, 1.19, 1.19, 1.19, 1.35, 1.56, 1.77, 2.00, 2.27, 2.59, 2.93, 3.30, 3.71, 4.19, 4.73, 5.42, 6.24, 6.24, 6.24, 6.24, 6.24, 6.50, 7.08, 8.02, 9.43, 11.28, 13.58, 16.18, 19.14, 22.18, 25.34, 28.39, 30.97, 30.97, 30.97, 30.97, 31.03, 31.30, 31.82, 32.63, 33.74, 35.18, 36.92, 39.15, 41.50, 44.23, 47.32, 50.62, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 53.86, 54.10, 54.32, 54.60, 54.93, 55.31, 55.81, 56.42, 57.20, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.32, 58.36, 58.46, 58.69, 59.09, 59.83, 60.93, 62.60, 64.88, 64.88, 64.88, 64.88, 67.89, 70.87, 73.79, 76.69, 79.52, 82.20, 84.71, 87.10, 89.29, 91.23, 92.98, 94.47, 95.75, 95.75, 95.75, 95.75, 96.38, 97.00, 97.58, 98.10, 98.55, 98.92, 99.23, 99.48, 99.68, 99.83, 99.92, 99.98, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,},
		        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.06, 0.19, 0.51, 1.16, 2.36, 4.55, 8.73, 15.70, 27.06, 45.62, 45.62, 45.62, 45.62, 45.86, 46.30, 46.98, 47.98, 49.31, 51.12, 53.45, 56.39, 60.30, 65.35, 71.65, 79.88, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.65, 90.71, 90.94, 91.36, 91.97, 92.75, 93.72, 94.74, 95.79, 96.79, 97.73, 98.59, 99.37, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,},
	        };
            // [3,DEF.CT_FIVE_MAX]
            float[,] fPer = new float[3, 14]{
		            {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 5, 5,},            // 三首权重 [CT_INVALID, CT_FIVE_MAX)
		            {0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8, 10, 10, 10,},         // 二首权重 [CT_INVALID, CT_FIVE_MAX)
		            {0, 1, 1, 3, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1,},           // 头首权重 [CT_INVALID, CT_FIVE_MAX)
	            };
            uint[] t1 = new uint[3] { temp1.dwVal[0] >> 22, temp1.dwVal[1] >> 22, temp1.dwVal[2] >> 22 };
            uint[] t2 = new uint[3] { temp2.dwVal[0] >> 22, temp2.dwVal[1] >> 22, temp2.dwVal[2] >> 22 };            
	        uint[] type1 = new uint[3] {temp1.dwVal[0] >> 18, temp1.dwVal[1] >> 18, temp1.dwVal[2] >> 18 };
	        uint[] type2 = new uint[3] {temp2.dwVal[0] >> 18, temp2.dwVal[1] >> 18, temp2.dwVal[2] >> 18 };
            float fFlag1 = 0, fFlag2 = 0;
            for (int i = 0; i < 3; ++i)
            {
                fFlag1 += fPer[i, t1[i]] * (float)fVal[i, type1[i]];
                fFlag2 += fPer[i, t2[i]] * (float)fVal[i, type2[i]];
            }
            if (fFlag1 == fFlag2) 
                return 0;
            return fFlag1 > fFlag2 ? -1 : 1;
        }

        static void Main(string[] args)
        {
            byte[] byTest = { 
		        0x09,0x03,0x04,0x0D,0x07,0x16,0x18,0x19,0x2B,0x2D,0x31,0x33,0x37,0x38,0x39,0x3D,0x1F
	        };
            int byCardNum = byTest.Length;

            byte[] byTest2 = { 
		        0x01,0x0D,0x0A,0x0F,0x1F
	        };
            int byCardNum2 = byTest2.Length;
            bool isMax = GameLogic.IsMaxTHS(byTest2, byCardNum2);

            List<stAnswer> vctOut = new List<stAnswer>();           // 不去重结果
            List<stAnswer> vctOut2 = new List<stAnswer>();          // 去重结果
            GameLogic.JudgeCards(byTest, (byte)byCardNum, ref vctOut);

            vctOut.Sort(Compare);
		    for (int i = 0; i < vctOut.Count; ++i)
		    {
			    int[] nType = new int[3]{(int)(vctOut[i].dwVal[0] >> 22), (int)(vctOut[i].dwVal[1] >> 22), (int)(vctOut[i].dwVal[2] >> 22) };
			    int nFlag = nType[0] * 10000 + nType[1] * 100 + nType[2];
			    int j = 0;
			    for (; j < vctOut2.Count; ++j)
			    {
				    int[] nType2 = new int[3]{(int)(vctOut2[j].dwVal[0] >> 22), (int)(vctOut2[j].dwVal[1] >> 22), (int)(vctOut2[j].dwVal[2] >> 22) };
				    int nFlag2 = nType2[0] * 10000 + nType2[1] * 100 + nType2[2];
                    // 牌型相同时，选最优的留下
				    if (nFlag == nFlag2) {
                        if (Compare(vctOut[i], vctOut2[j]) <= 0) {
						    vctOut2[j] = vctOut[i];
					    }
					    break;
				    }
                    // 去除所有牌型 都比现有差的组合
				    if (nType[0] <= nType2[0] && nType[1] <= nType2[1] && nType[2] <= nType2[2]) {
					    break;
				    }
			    }
			    if (j >= vctOut2.Count)
				    vctOut2.Add(vctOut[i]);
		    }
		    //*/
            vctOut2.Sort(Compare);

            //打印牌组
            for (int i = 0; i < vctOut.Count; ++i)
            {
                Console.WriteLine("");
                stAnswer answer = vctOut[i];
                for (int id = 0; id < 3; ++id) {
                    Console.WriteLine("type={0} -> {1} \t{2:x2}\t{3:x2}\t{4:x2}\t{5:x2}\t{6:x2}",
                    (answer.dwVal[id] >> 22), answer.dwVal[id], (int)answer.byCards[id,0], 
                    (int)answer.byCards[id,1], (int)answer.byCards[id,2], (int)answer.byCards[id,3], (int)answer.byCards[id,4]);
                } 
            }
            Console.ReadKey();
        }
    }
}
